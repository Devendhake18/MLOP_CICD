name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: spam-classifier
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com
        output-env-credentials: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dvc

    - name: Configure DVC
      run: |
        dvc remote add -d myremote ${{ vars.DVC_S3_URL }}
        dvc pull

    - name: Train model and push artifacts
      run: |
        dvc repro
        dvc push

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}